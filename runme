#!/usr/bin/env bash
set -e

# don't change these 4 lines
SCRIPTDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
TRAINING=$1;
INPUT=$2;
OUTPUT=$3;

# you should change the lines below

# prepare the training data
$SCRIPTDIR/preprocess.py < $TRAINING > tmp
sed -n 1~2p tmp > a
sed -n 2~2p tmp > b
$SCRIPTDIR/unknown.py < $SCRIPTDIR/a > $SCRIPTDIR/sibling_rules
$SCRIPTDIR/unknown.py < $SCRIPTDIR/b > $SCRIPTDIR/parent_rules
paste <(sed G sibling_rules) <(sed 's/.*/\n\0/g' parent_rules) > tmp
sed 's/\t//g' tmp > tmpfile

rm a
rm b
rm sibling_rules
rm parent_rules
# | $SCRIPTDIR/unknown.py > $SCRIPTDIR/tmpfile

python $SCRIPTDIR/q1.py < tmpfile
python $SCRIPTDIR/postprocess.py < $SCRIPTDIR/dev.parses > $SCRIPTDIR/dev.parses.post
python $SCRIPTDIR/evalb.py $SCRIPTDIR/dev.parses.post $SCRIPTDIR/dev.trees
# you should probably do something with the file you just wrote
# (and you may not want to call it tmpfile). But in this stub code I'm just going
# to create a grammar without paying attention to the input
#$SCRIPTDIR/demogrammar.py > $SCRIPTDIR/demogrammar

# run your parser on your input and save to your output. The provided parser is
# strictly right branching (cf. slides) and gets 12.4 f on dev. It ignores the grammar

#$SCRIPTDIR/rbranch.py -i $INPUT -o $OUTPUT
